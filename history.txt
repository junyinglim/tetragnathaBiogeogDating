distance_mean <- distance_sum / num_distances
# Useful 
taxa = data[1].taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 2
# get the converted state descriptions
state_desc = dat_range_n.getStateDescriptions()
# write the state descriptions to file
state_desc_str = "state,range\\n"
for (i in 1:state_desc.size()){
    state_desc_str += (i-1) + "," + state_desc[i] + "\\n"
}
state_desc = dat_range_n.getStateDescriptions()
## IMPORT DATA ========================
out_fn <- "output/"
range_fn = "data/spiders_biogeog.nex"
geo_fn   = "data/hawaii"
times_fn = geo_fn + ".times.txt"
dist_fn  = geo_fn + ".distances.txt"
mol_filenames <- listFiles("data/alignments")
n_data_subsets <- mol_filenames.size()
for (i in 1:n_data_subsets) {
    data[i] = readDiscreteCharacterData(mol_filenames[i])
}
mvi = 0 # define move countermni = 0 # define monitor counter# read binary (01) presence-absence range datadat_range_01 = readDiscreteCharacterData(range_fn)n_areas <- dat_range_01.nchar()# determine the number of statesmax_areas <- 4 #2n_states <- 0for (k in 0:max_areas) n_states += choose(n_areas, k)# convert binary ranges into NaturalNumbersdat_range_n = formatDiscreteCharacterData(dat_range_01, "DEC", n_states)# epoch timestime_bounds <- readDataDelimitedFile(file=times_fn, delimiter=" ")n_epochs <- time_bounds.size()n_epochs <- 5# epoch connectivityfor (i in 1:n_epochs) {    epoch_fn = geo_fn + ".connectivity." + i + ".txt"    connectivity[i] <- readDataDelimitedFile(file=epoch_fn, delimiter=" ")}# area distancesdistances <- readDataDelimitedFile(file=dist_fn, delimiter=" ")distance_sum <- 0.0for (i in 1:n_areas) {    for (j in i:n_areas) {        if (i != j) {            distance_sum += distances[i][j]        }    }}num_distances = (n_areas * n_areas - n_areas) / 2
distance_mean <- distance_sum / num_distances
# Useful 
taxa = data[1].taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 2
# get the converted state descriptions
state_desc = dat_range_n.getStateDescriptions()
# write the state descriptions to file
state_desc_str = "state,range\\n"
for (i in 1:state_desc.size()){
    state_desc_str += (i-1) + "," + state_desc[i] + "\\n"
}
write(state_desc_str, file=out_fn+"state_labels.txt")
for (i in 1:n_epochs) {
    epoch_fn = geo_fn + ".connectivity." + i + ".txt"
    connectivity[i] <- readDataDelimitedFile(file=epoch_fn, delimiter=" ")
}
time_bounds <- readDataDelimitedFile(file=times_fn, delimiter=" ")
n_epochs <- time_bounds.size()
n_epochs <- 5
# epoch connectivity
for (i in 1:n_epochs) {
    epoch_fn = geo_fn + ".connectivity." + i + ".txt"
    connectivity[i] <- readDataDelimitedFile(file=epoch_fn, delimiter=" ")
}
distances <- readDataDelimitedFile(file=dist_fn, delimiter=" ")
distance_sum <- 0.0
for (i in 1:n_areas) {
    for (j in i:n_areas) {
        if (i != j) {
            distance_sum += distances[i][j]
        }
    }
}
num_distances = (n_areas * n_areas - n_areas) / 2
distance_mean <- distance_sum / num_distances
# Useful 
taxa = data[1].taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 2
# get the converted state descriptions
state_desc = dat_range_n.getStateDescriptions()
# write the state descriptions to file
state_desc_str = "state,range\\n"
for (i in 1:state_desc.size()){
    state_desc_str += (i-1) + "," + state_desc[i] + "\\n"
}
write(state_desc_str, file=out_fn+"state_labels.txt")
state_desc = dat_range_n.getStateDescriptions()
dat_range_n = formatDiscreteCharacterData(dat_range_01, "DEC", n_states)
dat_range_01 = readDiscreteCharacterData(range_fn)
out_fn <- "output/"
range_fn = "data/spiders_biogeog.nex"
geo_fn   = "data/hawaii"
times_fn = geo_fn + ".times.txt"
dist_fn  = geo_fn + ".distances.txt"
mol_filenames <- listFiles("data/alignments")
n_data_subsets <- mol_filenames.size()
for (i in 1:n_data_subsets) {
    data[i] = readDiscreteCharacterData(mol_filenames[i])
}
mvi = 0 # define move counter
mni = 0 # define monitor counter
# read binary (01) presence-absence range data
dat_range_01 = readDiscreteCharacterData(range_fn)
n_areas <- dat_range_01.nchar()
# determine the number of states
max_areas <- 4 #2
n_states <- 0
for (k in 0:max_areas) n_states += choose(n_areas, k)
n_states
n_areas
rf_DEC_raw            <- rep(0, n_states)
rf_DEC_raw
n_states
